//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /afs/asu.edu/users/c/j/s/cjsando1/EEE_498/HW_4/EEE498_NOV_26/ProjPart4/rtl/ctl.vp
//  Source template: ctl
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

///////////////////////////////////////////////////////////////////
// I-type Opcode Parameters
///////////////////////////////////////////////////////////////////

// addi (_GENESIS2_DECLARATION_PRIORITY_) = 8
//
// andi (_GENESIS2_DECLARATION_PRIORITY_) = 12
//
// beq (_GENESIS2_DECLARATION_PRIORITY_) = 4
//
// bgtz (_GENESIS2_DECLARATION_PRIORITY_) = 7
//
// bne (_GENESIS2_DECLARATION_PRIORITY_) = 5
//
// lw (_GENESIS2_DECLARATION_PRIORITY_) = 35
//
// ori (_GENESIS2_DECLARATION_PRIORITY_) = 13
//
// slti (_GENESIS2_DECLARATION_PRIORITY_) = 10
//
// sw (_GENESIS2_DECLARATION_PRIORITY_) = 43
//
// xori (_GENESIS2_DECLARATION_PRIORITY_) = 14
//

/////////////////////////////////////////////////////////////////////
// R-type Parameters
/////////////////////////////////////////////////////////////////////
  
//my $R_type   = parameter(Name=>"R_type", Val=>0);

// add (_GENESIS2_DECLARATION_PRIORITY_) = 32
//
// and (_GENESIS2_DECLARATION_PRIORITY_) = 36
//
// jr (_GENESIS2_DECLARATION_PRIORITY_) = 8
//
// sub (_GENESIS2_DECLARATION_PRIORITY_) = 34
//
// sra (_GENESIS2_DECLARATION_PRIORITY_) = 3
//
// or (_GENESIS2_DECLARATION_PRIORITY_) = 37
//
// nor (_GENESIS2_DECLARATION_PRIORITY_) = 39
//
// slt (_GENESIS2_DECLARATION_PRIORITY_) = 42
//
// xor (_GENESIS2_DECLARATION_PRIORITY_) = 38
//

/////////////////////////////////////////////////////////////////////
// J-type Opcode Parameter
/////////////////////////////////////////////////////////////////////

// j (_GENESIS2_DECLARATION_PRIORITY_) = 2
//

///////////////////////////////////////////////////////////////////
//  ctl.vp
//
//

module ctl_unq1 (
        input logic [31:0] instr,

        output logic [1:0] jump_sel,
        output logic branch,
        output logic memRead,
        output logic mem_to_reg,
        output logic [5:0] ALUop,
        output logic memWrite,
        output logic ALUSrc,
        output logic RegWrite,
	output logic RegDST
		);

/////////////////////////////////////////
// Wire Definitions
/////////////////////////////////////////

logic [5:0]  opcode;
logic [5:0]  func;

assign opcode = instr[31:26];
assign func = instr[5:0];


always_comb begin
    unique casex ({opcode,func})
        {6'h0,6'd32} : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b000001000000011; //R-Type
        {6'h0,6'd36} : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b000001001000011;
        {6'h0,6'd8 } : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b100000010000011;
        {6'h0,6'd34} : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b000001000100011;
        {6'h0,6'd3} : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b000000000110011;
        {6'h0,6'd37 } : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b000001001010011;
        {6'h0,6'd39} : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b000001001110011;
        {6'h0,6'd42} : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b000001010100011;
        {6'h0,6'd38} : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b000001001100011;

        {6'd8,6'b??????} : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b000001000000111; //I-Type
        {6'd12,6'b??????} : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b000001001000111;
        {6'd4 ,6'b??????} : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b001000000000001;
        {6'd7,6'b??????} : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b001000000000101;
        {6'd5 ,6'b??????} : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b001000000000001;
        {6'd35  ,6'b??????} : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b000110000000110;
        {6'd13 ,6'b??????} : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b000001001010111;
        {6'd10,6'b??????} : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b000001010100111;
        {6'd43  ,6'b??????} : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b000000000001101;
        {6'd14,6'b??????} : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b000001001100111;

        {6'd2   ,6'b??????} : {jump_sel, branch, memRead, mem_to_reg, ALUop, memWrite, ALUSrc, RegWrite, RegDST} = 15'b010000000000001; //J-Type
    endcase
end
endmodule: ctl_unq1
