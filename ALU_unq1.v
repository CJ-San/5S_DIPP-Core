//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /afs/asu.edu/users/c/j/s/cjsando1/EEE_498/HW_4/EEE498_NOV_26/ProjPart4/rtl/ALU.vp
//  Source template: ALU
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

// ALU.vp


// bitWidth (_GENESIS2_DECLARATION_PRIORITY_) = 32
//
// ALUControl (_GENESIS2_DECLARATION_PRIORITY_) = 6
//

module ALU_unq1 (
	input logic [31:0] a,
	input logic [31:0] b,
	input logic [5:0] branchop,
	input logic [5:0] ALUctrl,
	output logic branch_en,
	output logic [31:0] z
		);

always_comb begin

	unique casex (ALUctrl)
	
        	6'h20 : z = a + b ;            //ADD  Function
		6'h22 : z = a - b ;            //SUB  Function
		6'h24 : z = a & b ;            //AND  Function
		6'h25 : z = a | b ;            //OR   Function
		6'h27 : z = ~(a | b) ;         //NOR  Function
		6'h26 : z = a ^ b ;            //XOR  Function
		6'h2A : z = (a<b) ? 1 : 0 ;    //SLT  Function
		6'h03 : z = a>>b;  	     //SRA  Function
		
	endcase
end

always_comb begin

	unique casex (branchop)
		6'h4 : branch_en = (a==b) ? 1 :0;
	//	6'h7 : branch_en = ($signed(a)>32'b0)  ? 1 :0; //b = 0
		6'h7 : branch_en = (a[31]||(a==31'd0)) ? 0 : 1; //b = 0
		6'h5 : branch_en = (a!=b) ? 1 :0;
endcase
end
endmodule: ALU_unq1
